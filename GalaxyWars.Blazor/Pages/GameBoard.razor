@page "/gameboard"
@using GalaxyWars
@using GalaxyWars.Models
@using GalaxyWars.Core
@using System.Drawing

@code {
    private GalaxyWars.GameBoard? board;
    private int width = 8;
    private int height = 8;
    private bool gameStarted = false;
    private (int x, int y)? selectedCell = null;
    private List<string> playerNames = new();
    private string newPlayerName = string.Empty;
    private List<Player> players = new();
    private int currentPlayerIndex = 0;
    private Player? CurrentPlayer => (players.Count > 0 && currentPlayerIndex >= 0 && currentPlayerIndex < players.Count) ? players[currentPlayerIndex] : null;
    private (int x, int y)? moveFrom = null;
    private (int x, int y)? moveTo = null;
    private string moveMessage = string.Empty;
    private static readonly string[] playerColors = new[] { "#2196f3", "#e53935", "#43a047", "#8e24aa", "#ffb300", "#00bcd4", "#f06292", "#6d4c41" };
    private bool showBuyShipPanel = false;
    private SpaceShip? selectedShipToBuy = null;
    private string buyShipMessage = string.Empty;
    private List<SpaceShip> availableShips = new()
    {
        new SpaceShip("Swift Scout", SpaceShipType.Scout, 600, 80, 30, 50, 30, 200),
        new SpaceShip("Eagle Eye", SpaceShipType.Scout, 620, 90, 35, 60, 35, 220),
        new SpaceShip("Rapid Explorer", SpaceShipType.Scout, 640, 100, 40, 70, 40, 240),
        new SpaceShip("Blaze Fighter", SpaceShipType.Fighter, 500, 150, 100, 200, 150, 500),
        new SpaceShip("Thunder Strike", SpaceShipType.Fighter, 520, 160, 110, 220, 160, 520),
        new SpaceShip("Viper Fang", SpaceShipType.Fighter, 540, 170, 120, 240, 170, 540),
        new SpaceShip("Guardian Frigate", SpaceShipType.Frigate, 400, 200, 150, 300, 250, 700),
        new SpaceShip("Protector", SpaceShipType.Frigate, 420, 210, 160, 320, 260, 720),
        new SpaceShip("Defender", SpaceShipType.Frigate, 440, 220, 170, 340, 270, 740),
        new SpaceShip("Annihilator Destroyer", SpaceShipType.Destroyer, 350, 300, 200, 500, 350, 900),
        new SpaceShip("Devastator", SpaceShipType.Destroyer, 370, 310, 210, 520, 360, 920),
        new SpaceShip("Obliterator", SpaceShipType.Destroyer, 390, 320, 220, 540, 370, 940),
        new SpaceShip("Titan Cruiser", SpaceShipType.Cruiser, 300, 400, 300, 600, 450, 1100),
        new SpaceShip("Colossus", SpaceShipType.Cruiser, 320, 410, 310, 620, 460, 1120),
        new SpaceShip("Behemoth", SpaceShipType.Cruiser, 340, 420, 320, 640, 470, 1140),
        new SpaceShip("Imperial Capital Ship", SpaceShipType.CapitalShip, 250, 500, 400, 800, 600, 1300),
        new SpaceShip("Majestic", SpaceShipType.CapitalShip, 270, 510, 410, 820, 610, 1320),
        new SpaceShip("Sovereign", SpaceShipType.CapitalShip, 290, 520, 420, 840, 620, 1340),
        new SpaceShip("Mammoth Freighter", SpaceShipType.Freighter, 200, 600, 800, 100, 100, 1000),
        new SpaceShip("Goliath", SpaceShipType.Freighter, 220, 610, 810, 110, 110, 1020),
        new SpaceShip("Leviathan", SpaceShipType.Freighter, 240, 620, 820, 120, 120, 1040),
    };
    private bool showCreateFleetPanel = false;
    private string newFleetName = string.Empty;
    private List<GalaxyWars.SpaceShip> shipsForFleet = new();
    private HashSet<GalaxyWars.SpaceShip> selectedShipsForFleet = new();
    private string createFleetMessage = string.Empty;
    private bool showMoveFleetPanel = false;
    private GalaxyWars.Models.Fleet? selectedFleetToMove = null;
    private (int x, int y)? selectedFleetTarget = null;
    private string moveFleetMessage = string.Empty;
    private bool showAttackPanel = false;
    private GalaxyWars.Models.Fleet? selectedFleetToAttack = null;
    private (int x, int y)? selectedAttackTarget = null;
    private string attackMessage = string.Empty;
    private bool showUpgradeDefensePanel = false;
    private GalaxyWars.Models.Planet? selectedPlanetToUpgrade = null;
    private int defenseUpgradeAmount = 0;
    private string upgradeDefenseMessage = string.Empty;
    private bool showFleetsPanel = false;
    private bool showOccupiedPlanetsPanel = false;
    private bool showAllOccupiedPlanetsPanel = false;
    private bool showResourcesPanel = false;

    private void AddPlayer()
    {
        if (!string.IsNullOrWhiteSpace(newPlayerName))
        {
            playerNames.Add(newPlayerName.Trim());
            newPlayerName = string.Empty;
        }
    }

    private void StartGame()
    {
        board = new GalaxyWars.GameBoard(width, height);
        players.Clear();
        var rand = new Random();
        for (int i = 0; i < playerNames.Count; i++)
        {
            var name = playerNames[i];
            int x, y;
            do
            {
                x = rand.Next(width);
                y = rand.Next(height);
            } while (board.GetCell(x, y).OccupiedByPlayer != null);
            var cell = board.GetCell(x, y);
            var color = playerColors[i % playerColors.Length];
            var player = new Player(name, color, cell);
            cell.OccupiedByPlayer = player;
            players.Add(player);
        }
        gameStarted = true;
        selectedCell = null;
    }

    private void SelectCell(int x, int y)
    {
        if (showAttackPanel && selectedFleetToAttack != null)
        {
            SelectAttackTarget(x, y);
            return;
        }
        if (showMoveFleetPanel && selectedFleetToMove != null)
        {
            SelectFleetTarget(x, y);
            return;
        }
        if (!gameStarted || CurrentPlayer == null || board == null)
            return;
        var cell = board.GetCell(x, y);
        if (cell == null) return;
        if (cell.OccupiedByPlayer != null && cell.OccupiedByPlayer.Name == CurrentPlayer.Name)
        {
            moveFrom = (x, y);
            moveTo = null;
            moveMessage = $"{CurrentPlayer.Name} taşını nereye taşımak istiyorsun?";
        }
        else if (moveFrom != null && cell.OccupiedByPlayer == null)
        {
            moveTo = (x, y);
            moveMessage = $"Taşı butonuna basarak hamleni tamamla.";
        }
        else
        {
            moveMessage = string.Empty;
        }
        selectedCell = (x, y);
    }

    private void MovePlayer()
    {
        if (moveFrom != null && moveTo != null && board != null && CurrentPlayer != null)
        {
            var fromCell = board.GetCell(moveFrom.Value.x, moveFrom.Value.y);
            var toCell = board.GetCell(moveTo.Value.x, moveTo.Value.y);
            if (fromCell != null && fromCell.OccupiedByPlayer != null && fromCell.OccupiedByPlayer.Name == CurrentPlayer.Name && toCell != null && toCell.OccupiedByPlayer == null)
            {
                toCell.OccupiedByPlayer = CurrentPlayer;
                fromCell.OccupiedByPlayer = null;
                moveMessage = $"{CurrentPlayer.Name} taşını ({moveFrom.Value.x},{moveFrom.Value.y})'den ({moveTo.Value.x},{moveTo.Value.y})'ye taşıdı.";
                moveFrom = null;
                moveTo = null;
                NextPlayer();
            }
        }
    }

    private bool PlayerHasPiece(Player player)
    {
        if (board == null) return false;
        for (int y = 0; y < height; y++)
            for (int x = 0; x < width; x++)
                if (board.GetCell(x, y).OccupiedByPlayer == player)
                    return true;
        return false;
    }

    private void NextPlayer()
    {
        ProduceResourcesForAllPlayers();
        if (players.Count > 0)
        {
            int attempts = 0;
            do
            {
                currentPlayerIndex = (currentPlayerIndex + 1) % players.Count;
                attempts++;
            }
            while (!PlayerHasPiece(players[currentPlayerIndex]) && attempts < players.Count);
        }
    }

    private void ShowBuyShipPanel()
    {
        showBuyShipPanel = true;
        buyShipMessage = string.Empty;
        selectedShipToBuy = null;
    }
    private void HideBuyShipPanel()
    {
        showBuyShipPanel = false;
        buyShipMessage = string.Empty;
        selectedShipToBuy = null;
    }
    private void SelectShipToBuy(SpaceShip ship)
    {
        selectedShipToBuy = ship;
        buyShipMessage = string.Empty;
    }
    private void BuySelectedShip()
    {
        if (CurrentPlayer == null || selectedShipToBuy == null)
            return;
        if (CurrentPlayer.Gold >= selectedShipToBuy.Cost)
        {
            CurrentPlayer.Gold -= selectedShipToBuy.Cost;
            CurrentPlayer.SpaceShips.Add(selectedShipToBuy);
            buyShipMessage = $"{selectedShipToBuy.Name} satın alındı!";
        }
        else
        {
            buyShipMessage = "Yeterli altın yok!";
        }
    }
    private void ShowCreateFleetPanel()
    {
        showCreateFleetPanel = true;
        createFleetMessage = string.Empty;
        newFleetName = string.Empty;
        selectedShipsForFleet.Clear();
        shipsForFleet = CurrentPlayer?.SpaceShips.Where(ship => !CurrentPlayer.Fleets.SelectMany(f => f.Ships).Contains(ship)).ToList() ?? new();
    }
    private void HideCreateFleetPanel()
    {
        showCreateFleetPanel = false;
        createFleetMessage = string.Empty;
        newFleetName = string.Empty;
        selectedShipsForFleet.Clear();
    }
    private void ToggleShipForFleet(GalaxyWars.SpaceShip ship)
    {
        if (selectedShipsForFleet.Contains(ship))
            selectedShipsForFleet.Remove(ship);
        else
            selectedShipsForFleet.Add(ship);
    }
    private void CreateFleet()
    {
        if (CurrentPlayer == null)
            return;
        if (string.IsNullOrWhiteSpace(newFleetName))
        {
            createFleetMessage = "Filo ismi giriniz.";
            return;
        }
        if (selectedShipsForFleet.Count == 0)
        {
            createFleetMessage = "En az bir gemi seçmelisiniz.";
            return;
        }
        var newFleet = new GalaxyWars.Models.Fleet(newFleetName, CurrentPlayer.HomeBase.Position, CurrentPlayer, null);
        foreach (var ship in selectedShipsForFleet)
            newFleet.AddShip(ship);
        CurrentPlayer.Fleets.Add(newFleet);
        createFleetMessage = $"{newFleetName} filosu oluşturuldu!";
        HideCreateFleetPanel();
    }
    private void ShowMoveFleetPanel()
    {
        showMoveFleetPanel = true;
        moveFleetMessage = string.Empty;
        selectedFleetToMove = null;
        selectedFleetTarget = null;
    }
    private void HideMoveFleetPanel()
    {
        showMoveFleetPanel = false;
        moveFleetMessage = string.Empty;
        selectedFleetToMove = null;
        selectedFleetTarget = null;
    }
    private void SelectFleetToMove(GalaxyWars.Models.Fleet fleet)
    {
        selectedFleetToMove = fleet;
        selectedFleetTarget = null;
        moveFleetMessage = string.Empty;
    }
    private void SelectFleetTarget(int x, int y)
    {
        selectedFleetTarget = (x, y);
        moveFleetMessage = string.Empty;
    }
    private void MoveSelectedFleet()
    {
        if (selectedFleetToMove == null || selectedFleetTarget == null || board == null)
            return;
        var targetCell = board.GetCell(selectedFleetTarget.Value.x, selectedFleetTarget.Value.y);
        if (targetCell == null || targetCell.OccupiedByPlayer != null)
        {
            moveFleetMessage = "Hedef hücre dolu!";
            return;
        }
        selectedFleetToMove.CurrentLocation = new System.Drawing.Point(selectedFleetTarget.Value.x, selectedFleetTarget.Value.y);
        moveFleetMessage = $"{selectedFleetToMove.Name} filosu ({selectedFleetTarget.Value.x},{selectedFleetTarget.Value.y}) konumuna taşındı.";
        HideMoveFleetPanel();
    }
    private void ShowAttackPanel()
    {
        showAttackPanel = true;
        attackMessage = string.Empty;
        selectedFleetToAttack = null;
        selectedAttackTarget = null;
    }
    private void HideAttackPanel()
    {
        showAttackPanel = false;
        attackMessage = string.Empty;
        selectedFleetToAttack = null;
        selectedAttackTarget = null;
    }
    private void SelectFleetToAttack(GalaxyWars.Models.Fleet fleet)
    {
        selectedFleetToAttack = fleet;
        selectedAttackTarget = null;
        attackMessage = string.Empty;
    }
    private void SelectAttackTarget(int x, int y)
    {
        selectedAttackTarget = (x, y);
        attackMessage = string.Empty;
    }
    private void AttackWithSelectedFleet()
    {
        if (selectedFleetToAttack == null || selectedAttackTarget == null || board == null)
            return;
        var targetCell = board.GetCell(selectedAttackTarget.Value.x, selectedAttackTarget.Value.y);
        if (targetCell == null || targetCell.OccupiedByPlayer == null)
        {
            attackMessage = "Hedefte saldırılacak bir filo yok!";
            return;
        }
        // Basit saldırı mekaniği: Saldıran filonun gücü > savunan filonun gücü ise kazanır
        var defender = targetCell.OccupiedByPlayer;
        int attackerPower = selectedFleetToAttack.Ships.Sum(s => s.FirePower);
        int defenderPower = defender.Fleets.SelectMany(f => f.Ships).Sum(s => s.FirePower);
        if (attackerPower > defenderPower)
        {
            // Savunan filoyu yok et
            defender.Fleets.Clear();
            targetCell.OccupiedByPlayer = selectedFleetToAttack.Owner;
            attackMessage = $"Saldırı başarılı! {defender.Name} filoları yok edildi.";
        }
        else
        {
            // Saldıran filo yok olur
            selectedFleetToAttack.Owner.Fleets.Remove(selectedFleetToAttack);
            attackMessage = "Saldırı başarısız! Saldıran filo yok edildi.";
        }
        HideAttackPanel();
    }
    private void ShowUpgradeDefensePanel()
    {
        showUpgradeDefensePanel = true;
        upgradeDefenseMessage = string.Empty;
        selectedPlanetToUpgrade = null;
        defenseUpgradeAmount = 0;
    }
    private void HideUpgradeDefensePanel()
    {
        showUpgradeDefensePanel = false;
        upgradeDefenseMessage = string.Empty;
        selectedPlanetToUpgrade = null;
        defenseUpgradeAmount = 0;
    }
    private List<GalaxyWars.Models.Planet> GetCurrentPlayerPlanets()
    {
        var result = new List<GalaxyWars.Models.Planet>();
        if (board == null || CurrentPlayer == null) return result;
        for (int y = 0; y < height; y++)
            for (int x = 0; x < width; x++)
            {
                var cell = board.GetCell(x, y);
                if (cell.OccupiedByPlanet != null && cell.OccupiedByPlanet.OccupiedBy == CurrentPlayer)
                    result.Add(cell.OccupiedByPlanet);
            }
        return result.Distinct().ToList();
    }
    private void UpgradeSelectedPlanetDefense()
    {
        if (CurrentPlayer == null || selectedPlanetToUpgrade == null || defenseUpgradeAmount <= 0)
            return;
        if (CurrentPlayer.Gold >= defenseUpgradeAmount)
        {
            CurrentPlayer.Gold -= defenseUpgradeAmount;
            selectedPlanetToUpgrade.DefenseCapacity += defenseUpgradeAmount;
            upgradeDefenseMessage = $"{selectedPlanetToUpgrade.Name} savunması {defenseUpgradeAmount} arttı!";
        }
        else
        {
            upgradeDefenseMessage = "Yeterli altın yok!";
        }
    }
    private void ShowFleetsPanel()
    {
        showFleetsPanel = true;
    }
    private void HideFleetsPanel()
    {
        showFleetsPanel = false;
    }
    private void ShowOccupiedPlanetsPanel()
    {
        showOccupiedPlanetsPanel = true;
    }
    private void HideOccupiedPlanetsPanel()
    {
        showOccupiedPlanetsPanel = false;
    }
    private List<(GalaxyWars.Models.Planet planet, List<GalaxyWars.Models.Fleet> fleets)> GetCurrentPlayerOccupiedPlanetsAndFleets()
    {
        var result = new List<(GalaxyWars.Models.Planet, List<GalaxyWars.Models.Fleet>)>();
        if (board == null || CurrentPlayer == null) return result;
        for (int y = 0; y < height; y++)
            for (int x = 0; x < width; x++)
            {
                var cell = board.GetCell(x, y);
                if (cell.OccupiedByPlanet != null && cell.OccupiedByPlanet.OccupiedBy == CurrentPlayer)
                {
                    var fleets = CurrentPlayer.Fleets.Where(f => f.CurrentLocation.X == x && f.CurrentLocation.Y == y).ToList();
                    result.Add((cell.OccupiedByPlanet, fleets));
                }
            }
        return result.Distinct().ToList();
    }
    private void ShowAllOccupiedPlanetsPanel()
    {
        showAllOccupiedPlanetsPanel = true;
    }
    private void HideAllOccupiedPlanetsPanel()
    {
        showAllOccupiedPlanetsPanel = false;
    }
    private List<(GalaxyWars.Models.Planet planet, GalaxyWars.Models.Player owner)> GetAllOccupiedPlanets()
    {
        var result = new List<(GalaxyWars.Models.Planet, GalaxyWars.Models.Player)>();
        if (board == null) return result;
        for (int y = 0; y < height; y++)
            for (int x = 0; x < width; x++)
            {
                var cell = board.GetCell(x, y);
                if (cell.OccupiedByPlanet != null && cell.OccupiedByPlanet.OccupiedBy != null)
                {
                    result.Add((cell.OccupiedByPlanet, cell.OccupiedByPlanet.OccupiedBy));
                }
            }
        return result.Distinct().ToList();
    }
    private void ShowResourcesPanel()
    {
        showResourcesPanel = true;
    }
    private void HideResourcesPanel()
    {
        showResourcesPanel = false;
    }
    private Dictionary<string, int> GetPlayerTotalResources(Player player)
    {
        var totals = new Dictionary<string, int>();
        foreach (var planet in GetCurrentPlayerPlanets())
        {
            foreach (var kvp in planet.Resources)
            {
                if (!totals.ContainsKey(kvp.Key))
                    totals[kvp.Key] = 0;
                totals[kvp.Key] += kvp.Value;
            }
        }
        return totals;
    }
    private void ProduceResourcesForAllPlayers()
    {
        if (board == null) return;
        for (int y = 0; y < height; y++)
            for (int x = 0; x < width; x++)
            {
                var cell = board.GetCell(x, y);
                if (cell.OccupiedByPlanet != null)
                    cell.OccupiedByPlanet.ProduceResources();
            }
    }
}

<style>
    .game-board-table {
        margin: 30px auto;
        border-collapse: separate;
        border-spacing: 6px;
        box-shadow: 0 4px 24px 0 rgba(0,0,0,0.10);
        background: #f8fafc;
        border-radius: 18px;
        padding: 12px;
    }
    .game-board-table td {
        width: 44px;
        height: 44px;
        text-align: center;
        vertical-align: middle;
        border-radius: 12px;
        box-shadow: 0 2px 8px 0 rgba(0,0,0,0.08);
        font-size: 1.5rem;
        font-weight: bold;
        transition: background 0.2s, box-shadow 0.2s, transform 0.1s;
        cursor: pointer;
        border: none;
        outline: none;
        user-select: none;
    }
    .game-board-table td:hover {
        box-shadow: 0 4px 16px 0 rgba(33,150,243,0.18);
        transform: scale(1.08);
        z-index: 2;
    }
    .game-board-table .selected {
        box-shadow: 0 0 0 3px #1976d2, 0 2px 8px 0 rgba(0,0,0,0.08);
        background: #b3d1ff !important;
    }
    .game-board-table .move-from {
        background: #ffe082 !important;
    }
    .game-board-table .move-to {
        background: #b9f6ca !important;
    }
</style>

<h3>Oyun Tahtası</h3>
@if (!gameStarted)
{
    <div>
        <label>Genişlik: <input type="number" @bind="width" min="2" max="20" /></label>
        <label>Yükseklik: <input type="number" @bind="height" min="2" max="20" /></label>
    </div>
    <div style="margin-top:10px;">
        <input placeholder="Oyuncu adı" @bind="newPlayerName" />
        <button @onclick="AddPlayer">Oyuncu Ekle</button>
    </div>
    <ul>
        @foreach (var name in playerNames)
        {
            <li>@name</li>
        }
    </ul>
    <button @onclick="StartGame" disabled="@(playerNames.Count == 0)">Oyun Başlat</button>
}
else if (board != null)
{
    <table class="game-board-table">
        @for (int y = 0; y < height; y++)
        {
            <tr>
                @for (int x = 0; x < width; x++)
                {
                    var cell = board.GetCell(x, y);
                    bool isSelected = selectedCell?.x == x && selectedCell?.y == y;
                    bool isMoveFrom = moveFrom != null && moveFrom.Value.x == x && moveFrom.Value.y == y;
                    bool isMoveTo = moveTo != null && moveTo.Value.x == x && moveTo.Value.y == y;
                    var cellClass = isSelected ? "selected" : isMoveFrom ? "move-from" : isMoveTo ? "move-to" : "";
                    <td class="@cellClass" style="background:@(cell.OccupiedByPlayer != null ? cell.OccupiedByPlayer.Color : "white"); color:@(cell.OccupiedByPlayer != null ? "white" : "#222");" @onclick="() => SelectCell(x, y)">
                        @if (cell.OccupiedByPlayer != null)
                        {
                            @(cell.OccupiedByPlayer.Name.Substring(0,1).ToUpper())
                        }
                        else if (cell.OccupiedByPlanet != null)
                        {
                            @("@")
                        }
                    </td>
                }
            </tr>
        }
    </table>
    @if (selectedCell != null)
    {
        <div style="margin-top:10px;">
            <b>Seçili Hücre:</b> (@selectedCell?.x, @selectedCell?.y)
        </div>
    }
    @if (CurrentPlayer != null)
    {
        <div style="margin-bottom:10px;">
            <b>Sıra:</b> @CurrentPlayer.Name
            <span style="margin-left:10px;">Altın: @CurrentPlayer.Gold</span>
            <button @onclick="ShowBuyShipPanel" style="margin-left:10px;">Uzay Gemisi Satın Al</button>
            <button @onclick="ShowCreateFleetPanel" style="margin-left:10px;">Filo Oluştur</button>
            <button @onclick="ShowMoveFleetPanel" style="margin-left:10px;">Filo Taşı</button>
            <button @onclick="ShowAttackPanel" style="margin-left:10px;">Saldırı</button>
            <button @onclick="ShowUpgradeDefensePanel" style="margin-left:10px;">Gezegen Savunmasını Yükselt</button>
            <button @onclick="ShowFleetsPanel" style="margin-left:10px;">Filolarımı Görüntüle</button>
            <button @onclick="ShowOccupiedPlanetsPanel" style="margin-left:10px;">İşgal Ettiğim Gezegenler</button>
            <button @onclick="ShowAllOccupiedPlanetsPanel" style="margin-left:10px;">Tüm İşgal Edilmiş Gezegenler</button>
            <button @onclick="ShowResourcesPanel" style="margin-left:10px;">Kaynaklarım</button>
            <button @onclick="NextPlayer" style="margin-left:10px;">Sıradaki Oyuncuya Geç</button>
        </div>
        @if (showBuyShipPanel)
        {
            <div style="background:#fff; border:1px solid #ccc; border-radius:8px; padding:20px; max-width:500px; margin-bottom:20px;">
                <h4>Uzay Gemisi Satın Al</h4>
                <table style="width:100%; font-size:0.95rem;">
                    <tr><th>İsim</th><th>Tip</th><th>Hız</th><th>Güç</th><th>Kalkan</th><th>Fiyat</th><th></th></tr>
                    @foreach (var ship in availableShips)
                    {
                        <tr style="background:@(selectedShipToBuy == ship ? "#e3f2fd" : "transparent");">
                            <td>@ship.Name</td>
                            <td>@ship.Type</td>
                            <td>@ship.MaxSpeed</td>
                            <td>@ship.FirePower</td>
                            <td>@ship.ShieldStrength</td>
                            <td>@ship.Cost</td>
                            <td><button @onclick="() => SelectShipToBuy(ship)">Seç</button></td>
                        </tr>
                    }
                </table>
                @if (selectedShipToBuy != null)
                {
                    <div style="margin-top:10px;">
                        <button @onclick="BuySelectedShip">Satın Al</button>
                    </div>
                }
                <div style="margin-top:10px; color:#d32f2f;">@buyShipMessage</div>
                <button @onclick="HideBuyShipPanel" style="margin-top:10px;">Kapat</button>
            </div>
        }
        @if (showCreateFleetPanel)
        {
            <div style="background:#fff; border:1px solid #ccc; border-radius:8px; padding:20px; max-width:500px; margin-bottom:20px;">
                <h4>Filo Oluştur</h4>
                <input placeholder="Filo ismi" @bind="newFleetName" style="margin-bottom:10px;" />
                <table style="width:100%; font-size:0.95rem;">
                    <tr><th>Seç</th><th>İsim</th><th>Tip</th><th>Hız</th><th>Güç</th><th>Kalkan</th></tr>
                    @foreach (var ship in shipsForFleet)
                    {
                        <tr>
                            <td><input type="checkbox" checked="@selectedShipsForFleet.Contains(ship)" @onchange="_ => ToggleShipForFleet(ship)" /></td>
                            <td>@ship.Name</td>
                            <td>@ship.Type</td>
                            <td>@ship.MaxSpeed</td>
                            <td>@ship.FirePower</td>
                            <td>@ship.ShieldStrength</td>
                        </tr>
                    }
                </table>
                <button @onclick="CreateFleet" style="margin-top:10px;">Filo Oluştur</button>
                <div style="margin-top:10px; color:#d32f2f;">@createFleetMessage</div>
                <button @onclick="HideCreateFleetPanel" style="margin-top:10px;">Kapat</button>
            </div>
        }
        @if (showMoveFleetPanel)
        {
            <div style="background:#fff; border:1px solid #ccc; border-radius:8px; padding:20px; max-width:500px; margin-bottom:20px;">
                <h4>Filo Taşı</h4>
                <div>
                    <b>Filolar:</b>
                    <ul>
                    @foreach (var fleet in CurrentPlayer.Fleets)
                    {
                        <li>
                            <button @onclick="() => SelectFleetToMove(fleet)" style="margin-right:10px;">Seç</button>
                            @fleet.Name (Konum: @fleet.CurrentLocation.X,@fleet.CurrentLocation.Y)
                        </li>
                    }
                    </ul>
                </div>
                @if (selectedFleetToMove != null)
                {
                    <div style="margin-top:10px;">
                        <b>Hedef Hücreyi Seç:</b>
                        <div style="margin-top:5px;">Tahta üstünde bir hücreye tıkla.</div>
                    </div>
                }
                @if (selectedFleetToMove != null && selectedFleetTarget != null)
                {
                    <div style="margin-top:10px;">
                        <button @onclick="MoveSelectedFleet">Taşı</button>
                    </div>
                }
                <div style="margin-top:10px; color:#d32f2f;">@moveFleetMessage</div>
                <button @onclick="HideMoveFleetPanel" style="margin-top:10px;">Kapat</button>
            </div>
        }
        @if (showAttackPanel)
        {
            <div style="background:#fff; border:1px solid #ccc; border-radius:8px; padding:20px; max-width:500px; margin-bottom:20px;">
                <h4>Saldırı</h4>
                <div>
                    <b>Filolar:</b>
                    <ul>
                    @foreach (var fleet in CurrentPlayer.Fleets)
                    {
                        <li>
                            <button @onclick="() => SelectFleetToAttack(fleet)" style="margin-right:10px;">Seç</button>
                            @fleet.Name (Konum: @fleet.CurrentLocation.X,@fleet.CurrentLocation.Y)
                        </li>
                    }
                    </ul>
                </div>
                @if (selectedFleetToAttack != null)
                {
                    <div style="margin-top:10px;">
                        <b>Hedef Hücreyi Seç:</b>
                        <div style="margin-top:5px;">Tahta üstünde bir hücreye tıkla.</div>
                    </div>
                }
                @if (selectedFleetToAttack != null && selectedAttackTarget != null)
                {
                    <div style="margin-top:10px;">
                        <button @onclick="AttackWithSelectedFleet">Saldır</button>
                    </div>
                }
                <div style="margin-top:10px; color:#d32f2f;">@attackMessage</div>
                <button @onclick="HideAttackPanel" style="margin-top:10px;">Kapat</button>
            </div>
        }
        @if (showUpgradeDefensePanel)
        {
            <div style="background:#fff; border:1px solid #ccc; border-radius:8px; padding:20px; max-width:500px; margin-bottom:20px;">
                <h4>Gezegen Savunmasını Yükselt</h4>
                <div>
                    <b>Gezegenler:</b>
                    <ul>
                    @foreach (var planet in GetCurrentPlayerPlanets())
                    {
                        <li>
                            <button @onclick="() => selectedPlanetToUpgrade = planet" style="margin-right:10px;">Seç</button>
                            @planet.Name (Savunma: @planet.DefenseCapacity)
                        </li>
                    }
                    </ul>
                </div>
                @if (selectedPlanetToUpgrade != null)
                {
                    <div style="margin-top:10px;">
                        <input type="number" min="1" @bind="defenseUpgradeAmount" placeholder="Artış miktarı" />
                        <button @onclick="UpgradeSelectedPlanetDefense" style="margin-left:10px;">Yükselt</button>
                    </div>
                }
                <div style="margin-top:10px; color:#d32f2f;">@upgradeDefenseMessage</div>
                <button @onclick="HideUpgradeDefensePanel" style="margin-top:10px;">Kapat</button>
            </div>
        }
        @if (showFleetsPanel)
        {
            <div style="background:#fff; border:1px solid #ccc; border-radius:8px; padding:20px; max-width:600px; margin-bottom:20px;">
                <h4>Filolarım</h4>
                @if (CurrentPlayer.Fleets.Count == 0)
                {
                    <div>Hiç filonuz yok.</div>
                }
                else
                {
                    <ul>
                    @foreach (var fleet in CurrentPlayer.Fleets)
                    {
                        <li style="margin-bottom:10px;">
                            <b>@fleet.Name</b> (Konum: @fleet.CurrentLocation.X,@fleet.CurrentLocation.Y)
                            <ul>
                            @foreach (var ship in fleet.Ships)
                            {
                                <li>@ship.Name - Tip: @ship.Type, Güç: @ship.FirePower, Kalkan: @ship.ShieldStrength</li>
                            }
                            </ul>
                        </li>
                    }
                    </ul>
                }
                <button @onclick="HideFleetsPanel" style="margin-top:10px;">Kapat</button>
            </div>
        }
        @if (showOccupiedPlanetsPanel)
        {
            <div style="background:#fff; border:1px solid #ccc; border-radius:8px; padding:20px; max-width:600px; margin-bottom:20px;">
                <h4>İşgal Ettiğim Gezegenler ve Filolar</h4>
                @if (GetCurrentPlayerOccupiedPlanetsAndFleets().Count == 0)
                {
                    <div>Hiç işgal ettiğiniz gezegen yok.</div>
                }
                else
                {
                    <ul>
                    @foreach (var (planet, fleets) in GetCurrentPlayerOccupiedPlanetsAndFleets())
                    {
                        <li style="margin-bottom:10px;">
                            <b>@planet.Name</b> (Savunma: @planet.DefenseCapacity)
                            <ul>
                            @foreach (var fleet in fleets)
                            {
                                <li>@fleet.Name (Gemiler: @fleet.Ships.Count)</li>
                            }
                            </ul>
                        </li>
                    }
                    </ul>
                }
                <button @onclick="HideOccupiedPlanetsPanel" style="margin-top:10px;">Kapat</button>
            </div>
        }
        @if (showAllOccupiedPlanetsPanel)
        {
            <div style="background:#fff; border:1px solid #ccc; border-radius:8px; padding:20px; max-width:600px; margin-bottom:20px;">
                <h4>Tüm İşgal Edilmiş Gezegenler</h4>
                @if (GetAllOccupiedPlanets().Count == 0)
                {
                    <div>Hiç işgal edilmiş gezegen yok.</div>
                }
                else
                {
                    <ul>
                    @foreach (var (planet, owner) in GetAllOccupiedPlanets())
                    {
                        <li><b>@planet.Name</b> (Savunma: @planet.DefenseCapacity) - Sahibi: @owner.Name</li>
                    }
                    </ul>
                }
                <button @onclick="HideAllOccupiedPlanetsPanel" style="margin-top:10px;">Kapat</button>
            </div>
        }
        @if (showResourcesPanel)
        {
            <div style="background:#fff; border:1px solid #ccc; border-radius:8px; padding:20px; max-width:600px; margin-bottom:20px;">
                <h4>Kaynaklarım</h4>
                <b>Toplam:</b>
                <ul>
                @foreach (var kvp in GetPlayerTotalResources(CurrentPlayer))
                {
                    <li>@kvp.Key: @kvp.Value</li>
                }
                </ul>
                <b>Gezegen Bazında:</b>
                <ul>
                @foreach (var planet in GetCurrentPlayerPlanets())
                {
                    <li><b>@planet.Name</b>:
                        <ul>
                        @foreach (var kvp in planet.Resources)
                        {
                            <li>@kvp.Key: @kvp.Value</li>
                        }
                        </ul>
                    </li>
                }
                </ul>
                <button @onclick="HideResourcesPanel" style="margin-top:10px;">Kapat</button>
            </div>
        }
        @if (!string.IsNullOrEmpty(moveMessage))
        {
            <div style="margin-bottom:10px; color: #0074d9;">@moveMessage</div>
        }
        @if (moveFrom != null && moveTo != null)
        {
            <button @onclick="MovePlayer" style="margin-bottom:10px;">Taşı</button>
        }
    }
}
else
{
    <p>Tahta yükleniyor...</p>
}